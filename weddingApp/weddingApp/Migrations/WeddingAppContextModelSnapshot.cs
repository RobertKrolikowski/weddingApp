// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using weddingApp.Data;

#nullable disable

namespace weddingApp.Migrations
{
    [DbContext(typeof(WeddingAppContext))]
    partial class WeddingAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("weddingApp.Model.Entities.Couple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrideName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeddingEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeddingEventId")
                        .IsUnique();

                    b.ToTable("Couples");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Gift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ThingId")
                        .HasColumnType("integer");

                    b.Property<int>("WeddingEventID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThingId");

                    b.HasIndex("WeddingEventID");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccompanyingPerson")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InviteSended")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeddingEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeddingEventId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeddingServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeddingServiceId")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Thing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Things");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.WeddingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WeddingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WeddingEvents");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.WeddingService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("WeddingEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeddingEventId");

                    b.ToTable("WeddingServices");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Couple", b =>
                {
                    b.HasOne("weddingApp.Model.Entities.WeddingEvent", "WeddingEvent")
                        .WithOne("Couple")
                        .HasForeignKey("weddingApp.Model.Entities.Couple", "WeddingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingEvent");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Gift", b =>
                {
                    b.HasOne("weddingApp.Model.Entities.Thing", "Thing")
                        .WithMany("Gift")
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weddingApp.Model.Entities.WeddingEvent", "WeddingEvent")
                        .WithMany("Gifts")
                        .HasForeignKey("WeddingEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thing");

                    b.Navigation("WeddingEvent");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Guest", b =>
                {
                    b.HasOne("weddingApp.Model.Entities.WeddingEvent", "WeddingEvent")
                        .WithMany("Guests")
                        .HasForeignKey("WeddingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingEvent");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Service", b =>
                {
                    b.HasOne("weddingApp.Model.Entities.WeddingService", "WeddingService")
                        .WithOne("Service")
                        .HasForeignKey("weddingApp.Model.Entities.Service", "WeddingServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingService");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.WeddingService", b =>
                {
                    b.HasOne("weddingApp.Model.Entities.WeddingEvent", "WeddingEvent")
                        .WithMany("WeddingServices")
                        .HasForeignKey("WeddingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingEvent");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.Thing", b =>
                {
                    b.Navigation("Gift");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.WeddingEvent", b =>
                {
                    b.Navigation("Couple")
                        .IsRequired();

                    b.Navigation("Gifts");

                    b.Navigation("Guests");

                    b.Navigation("WeddingServices");
                });

            modelBuilder.Entity("weddingApp.Model.Entities.WeddingService", b =>
                {
                    b.Navigation("Service")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
